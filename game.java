import java.util.Random;
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;

public class Game {
    private Player player;
    private Scanner scanner;

    public Game() {
        scanner = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è: ");
        this.player = new Player(scanner.nextLine());
    }

    public void start() {
        System.out.println("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, " + player.getName() + "!");
        Level level = new Level(1);
        level.start(player);
        Random random = new Random();
        List<Enemy> enemies = List.of(new Goblin(), new Orc(), new Troll());

        while (player.getHealth() > 0) {
            System.out.print("\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å? (fight/pick/use/status/exit): ");
            String action = scanner.nextLine().toLowerCase();

            switch (action) {
                case "fight":
                    Enemy enemy = enemies.get(random.nextInt(enemies.size()));
                    System.out.println("‚öîÔ∏è –ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: " + enemy.getName());
                    enemy.attack(player);
                    if (player.getHealth() > 0) {
                        System.out.println("üéâ –ü–æ–±–µ–¥–∞! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å " + enemy.getExperienceReward() + " –æ–ø—ã—Ç–∞.");
                        player.gainExperience(enemy.getExperienceReward());
                    }
                    break;
                
                case "pick":
                    Item item = random.nextBoolean() ? new HealthPotion() : new ExperienceGem();
                    player.addToInventory(item);
                    break;
                
                case "use":
                    if (!player.getInventory().isEmpty()) {
                        System.out.println("üéí –¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:");
                        for (int i = 0; i < player.getInventory().size(); i++) {
                            System.out.println((i + 1) + ". " + player.getInventory().get(i).getName());
                        }
                        System.out.print("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç (–Ω–æ–º–µ—Ä): ");
                        if (scanner.hasNextInt()) {
                            int choice = scanner.nextInt() - 1;
                            scanner.nextLine(); // Consume newline
                            if (choice >= 0 && choice < player.getInventory().size()) {
                                player.getInventory().get(choice).use(player);
                                player.getInventory().remove(choice);
                            }
                        } else {
                            System.out.println("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!");
                            scanner.nextLine(); // –û—á–∏—â–∞–µ–º –≤–≤–æ–¥
                        }
                    } else {
                        System.out.println("üì≠ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!");
                    }
                    break;
                
                case "status":
                    System.out.println("üíñ –ó–¥–æ—Ä–æ–≤—å–µ: " + player.getHealth() + " | ‚≠ê –û–ø—ã—Ç: " + player.getExperience());
                    break;
                
                case "exit":
                    System.out.println("üëã –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã.");
                    return;
                
                default:
                    System.out.println("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!");
            }
        }
        System.out.println("üíÄ –¢—ã —É–º–µ—Ä. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.");
    }
}
